openapi: 3.0.0
info:
  version: 1.0.0
  title: Kin Ecosystem
  description: Apis for client to server interaction
servers:
  - url: 'https://api.kinmarketplace.com/v1/'
  - url: 'https://api-stage.kinmarketplace.com/v1/'
  - url: 'https://api-test.kinmarketplace.com/v1/'
paths:
  /users:
    parameters:
      - $ref: '#/components/parameters/RequestId'
    post:
      tags:
        - Auth
      summary: Sign in/ Log in
      security: []
      description: Sign a user into kin marketplace
      operationId: signIn
      requestBody:
        description: sign in data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInData'
      responses:
        '200':
          description: Successfully created a user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me/activate:
    parameters:
      - $ref: '#/components/parameters/RequestId'
    post:
      tags:
        - Auth
      summary: Activate account
      description: Activate account by accepting TOS
      operationId: activateAcount
      responses:
        '200':
          description: Successfully activated. New token is returned and should be used from now on.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /offers:
    parameters:
      - $ref: '#/components/parameters/RequestId'
    get:
      tags:
        - Offers
      summary: Return a list of offers
      description: Return a **list** of offers
      operationId: getOffers
      parameters:
        - $ref: '#/components/parameters/QueryLimit'
        - $ref: '#/components/parameters/QueryAfter'
        - $ref: '#/components/parameters/QueryBefore'
      responses:
        '200':
          description: Successfully returned a list of offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferList'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/offers/external/orders':
    parameters:
      - $ref: '#/components/parameters/RequestId'
    post:
      tags:
        - Orders
      summary: create an external order for a native offer
      description: create an external order for a native offer
      operationId: createExternalOrder
      requestBody:
        description: submission of an order - currently spend only
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalOrderRequest'
      responses:
        '201':
          description: Successfully created an external order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenOrder'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/offers/{offer_id}/orders':
    parameters:
      - in: path
        name: offer_id
        required: true
        schema:
          type: string
        description: The offer id
      - $ref: '#/components/parameters/RequestId'
    post:
      tags:
        - Orders
      summary: create an order for an offer
      description: create an order for an offer
      operationId: createOrder
      responses:
        '201':
          description: Successfully created an order for an offer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenOrder'
        '404':
          description: Offer ended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/orders/{order_id}':
    parameters:
      - in: path
        name: order_id
        required: true
        schema:
          type: string
        description: The order id
      - $ref: '#/components/parameters/RequestId'
    get:
      tags:
        - Orders
      summary: get an order
      description: get an order
      operationId: getOrder
      responses:
        '200':
          description: Successfully returned an order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Orders
      summary: submit an order
      description: submit an order
      operationId: submitOrder
      requestBody:
        description: submission of an order
        required: false # in case of spend the content is not required
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EarnSubmission'
      responses:
        '201':
          description: |
            Order has successfully been submitted
            * For earn - poll form is valid, client should wait for payment on blockchain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: |
            Bad Request
            * For earn - payload is invalid/ order expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Orders
      summary: cancel an order
      description: cancel an order - this can be called only before an order is submitted
      operationId: cancelOrder
      responses:
        '204':
          description: Canceled order
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - Orders
      summary: change an order
      description: |
        change an order, currently the error can be changed (set) this in turn will convert this submitted order to a failed order. this gives the client an endpoint to report an internal error.
        you can only change an order that is in pending state.
        a failed order can always turn completed in case the order_id successfully appears in the blockchain.
      operationId: changeOrder
      requestBody:
        description: fields to update on an order
        required: false # in case of spend the content is not required
        content:
          application/merge-patch+json:
            schema:
              type: object
              properties:
                error:
                  $ref: '#/components/schemas/Error'
      responses:
        '201':
          description: Successfully closed the order with a failure status and given message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: No such order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders:
    parameters:
      - $ref: '#/components/parameters/RequestId'
    get:
      tags:
        - Orders
      summary: get user order history
      description: get user order history
      operationId: getHistory
      parameters:
        - $ref: '#/components/parameters/QueryLimit'
        - $ref: '#/components/parameters/QueryBefore'
        - $ref: '#/components/parameters/QueryAfter'
      responses:
        '200':
          description: History result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
security:
  - BearerAuth: []

components:
  parameters:
    RequestId:
      in: header
      name: X-REQUEST-ID
      required: true
      schema:
        type: string
      description: |
        A unique id for the request. A retransmitted request will have the same id
    QueryLimit:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
      description: maximum number of items in a list
    QueryBefore:
      in: query
      name: before
      schema:
        type: string
      description: cursor that points to the start of the page of data that has been returned
    QueryAfter:
      in: query
      name: after
      schema:
        type: string
      description: cursor that points to the end of the page of data that has been returned

  securitySchemes:
    BearerAuth:  # api requires the header Authorization: Bearer <token>
      type: http
      scheme: bearer

  schemas:
    OrderSpendResult:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum: [coupon, confirm_payment]

    CouponCodeResult:
      allOf:
        - $ref: '#/components/schemas/OrderSpendResult'
        - type: object
          required:
            - coupon_code
          properties:
            coupon_code:
              description: a coupon code - appears in a result object of an Order
              type: string
              example: aaaa-bbbb-cccc

    JWTBodyConfirmPaymentResult:
      allOf:
        - $ref: '#/components/schemas/OrderSpendResult'
        - type: object
          required:
            - jwt
          properties:
            jwt:
              description: JWT defined by JWTBodyConfirmPayment
              type: string

    BlockchainData:
      description: "details taken from a blockchain transaction - all fields optional"
      type: object
      properties:
        transaction_id:
          type: string
        sender_address:
          type: string
        recipient_address:
          type: string

    BaseOrder:
      type: object
      required:
        - id
        - offer_id
        - offer_type
        - title
        - description
        - amount
        - blockchain_data
      properties:
        id:
          type: string
          description: unique identifier of this item
        offer_id:
          type: string
          description: the offer which this order was created from
        offer_type:
          type: string
          enum:
            - earn
            - spend
        title:
          type: string
          example: Spotify
          description: usually a brand name
        description:
          type: string
          example: completed poll
        amount:
          type: integer
          example: 4000 (KIN)
          description: kin amount
        blockchain_data:
          $ref: "#/components/schemas/BlockchainData"

    Order:
      description: "a submitted order. it can be pending/completed/failed"
      allOf:
        - $ref: '#/components/schemas/BaseOrder'
        - type: object
          required:
            - status
            - completion_date
          properties:
            result:
              type: object
              oneOf:
                - $ref: '#/components/schemas/CouponCodeResult'
                - $ref: '#/components/schemas/JWTBodyConfirmPaymentResult'
              discriminator:
                propertyName: type
                mapping:
                  coupon: '#/components/schemas/CouponCodeResult'
                  confirm_payment: '#/components/schemas/JWTBodyConfirmPaymentResult'
              description: |
                * empty when no result (pending status, completed earn)
                * coupon code or confirm payment JWT when completed spend
            status:
              type: string
              enum:
                - pending
                - completed
                - failed
            completion_date:
              type: string
              example: "2018-09-13T14:33:33Z"
              description: UTC ISO
            call_to_action:
              type: string
              example: tap to reveal coupon
            content:
              type: string
              description: optional json payload defining a coupon page
            error:
              $ref: '#/components/schemas/Error'

    OrderList:
      description: "a list of submitted orders"
      type: object
      required:
        - orders
      properties:
        orders:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        paging:
          $ref: '#/components/schemas/Paging'

    EarnSubmission:
      description: "result of earn offer i.e. completed html poll"
      type: object
      required:
        - content
      properties:
        content:
          type: string
          description: "json encoded payload related to the earn offer"

    Offer:
      description: "offer details for the offer list"
      type: object
      required:
        - id
        - title
        - description
        - image
        - offer_type
        - amount
        - content
      properties:
        id:
          type: string
          example: "1231321"
        # for the offer list page
        title:
          type: string
          example: "Spotify Subscription"
        description:
          type: string
          example: "Get 30 days"
        image:
          type: string
          example: "http://xxx.www.zzz/image.jpg"
        amount:
          type: integer
          example: 300
        offer_type:
          type: string
          enum:
            - earn
            - spend
        # for the offer page
        content_type:
          description: "determines the type of data that appears in the content"
          type: string
          enum:
            - poll
            - coupon
        content:
          description: "The coupon description or the poll payload - as serialized json"
          type: string
        blockchain_data:
          $ref: "#/components/schemas/BlockchainData"

    OfferList:
      description: "a list of offers"
      type: object
      required:
        - offers
      properties:
        offers:
          type: array
          items:
            $ref: '#/components/schemas/Offer'
        paging:
          $ref: '#/components/schemas/Paging'

    ExternalOrderRequest:
      type: object
      required:
        - jwt
      properties:
        jwt:
          type: string
          description: string serialized JWTBodySpend

    OpenOrder:
      description: "an open order that hasn't been submitted yet"
      allOf:
        - $ref: '#/components/schemas/BaseOrder'
        - type: object
          required:
            - expiration_date
          properties:
            expiration_date:
              type: string
              example: "2018-08-09T11:25:33Z"

    CommonSignInData:
      description: "Base data for all sign in types"
      type: object
      required:
        - device_id
        - wallet_address
        - sign_in_type
      properties:
        device_id:
          type: string
        wallet_address:
          type: string
          description: "The address where earned funds will go to"
        sign_in_type:
          type: string
          enum:
            - jwt
            - whitelist

    JWTSignInData:
      description: "Sign in data for JWT sign in type"
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonSignInData'
        - type: object
          required:
            - jwt
          properties:
            jwt:
              type: string
              example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0aW1lc3RhbXAiOjEyMzQ1Njc4OTAsInVzZXJfaWQiOiJ1c2VyOjEyMzQiLCJhcHBfaWQiOiJhcHA6a2lrIn0.ywXZUlH2fSTxIk8V2egE9WkyJ4a9UOsAZqFN5G7o84al_utwmMA-HKSSM0-2EDtaZ2lM4FUIs0Byd0KO2HxglxrHL_grFHW_wFtnjcNrNxCsGKIXEpGowudQDuAh_ycY2EZ_JKhNY4ZPrTx69ImmeYvDkN3PvYV6_uSYQSMy6H0
              description: see JWTBodyRegister
              
    WhitelistSignInData:
      description: "Sign in data for whitelist sign in type"
      type: object
      allOf:
        - $ref: '#/components/schemas/CommonSignInData'
        - type: object
          required:
            - user_id
            - api_key
          properties:
            user_id:
              type: string
            app_id:
              type: string
            api_key:
              type: string
              
    SignInData:
      description: "payload required for signing in"
      oneOf:
        - $ref: '#/components/schemas/JWTSignInData'
        - $ref: '#/components/schemas/WhitelistSignInData'
      discriminator:
        propertyName: sign_in_type
        mapping:
          jwt: '#/components/schemas/JWTSignInData'
          whitelist: '#/components/schemas/WhitelistSignInData'

    AuthToken:
      description: "token issued by marketplace server"
      type: object
      required:
        - token
        - activated
        - expiration_date
        - app_id
      properties:
        token:
          type: string
          example: AAAAA-RRRRRR-DDDDD-BBBBBB
        activated:  # did approve terms of service?
          type: boolean
        expiration_date:
          type: string
          example: "2018-09-29T12:55:44Z"
        app_id:
          type: string
          example: kik
          description: a 3 - 4 letter symbol identifying the app

    Paging:
      description: "object accompanying lists - used to fetch next/previous section"
      type: object
      properties:
        cursors:
          type: object
          properties:
            after:
              type: string
              example: MTAxNTExOTQ1MjAwNzI5NDE
            before:
              type: string
              example: NDMyNzQyODI3OTQw
        previous:
          type: string
          example: https://graph.facebook.com/me/albums?limit=25&before=NDMyNzQyODI3OTQw
        next:
          type: string
          example: https://graph.facebook.com/me/albums?limit=25&after=MTAxNTExOTQ1MjAwNzI5NDE=

    Error:
      description: "an error"
      type: object
      required:
        - error
        - code
      properties:
        error:
          type: string
          example: "Invalid Form"
        message:
          type: string
          example: "Form given is not in the right format"
        code:
          type: integer
          example: 4001

    JWTHeader:
      description: common header for all JWTs
      type: object
      required:
        - keyid
        - alg
        - typ
      properties:
        keyid:
          type: string
        alg:
          type: string
          enum: [ES256]
        typ:
          type: string
          enum: [JWT]

    JWTBodyCommon:
      description: common body fields for all JWTs
      type: object
      required:
        - iat
        - iss
        - exp
        - sub
      properties:
        iat:
          type: number
          description: issued at - seconds from epoc
        iss:
          type: string
          description: issuer name, the same as app_id (kik)
        exp:
          type: number
          description: expiration - seconds from epoc
        sub:
          type: string
          description: subject
          enum: [register, spend, confirm_payment]

    JWTBodyRegister:
      allOf:
        - $ref: '#/components/schemas/JWTBodyCommon'
        - type: object
          required:
            - user_id
            - api_key
          properties:
            user_id:
              type: string
            api_key:
              type: string
              description: api key supplied by kin


    JWTBodySpend:
      allOf:
        - $ref: '#/components/schemas/JWTBodyCommon'
        - type: object
          required:
            - offer
          properties:
            offer:
              type: object
              required:
                - id
                - title
                - description
                - amount
                - wallet_address
              properties:
                id:
                  type: string
                  description: offer id - id is decided by digital service
                title:
                  type: string
                  description: offer title - appears in order history
                description:
                  type: string
                  description: offer description - appears in order history
                amount:
                  type: number
                  description: amount of kin for this offer - price
                wallet_address:
                  type: string
                  description: address the client should send kin to to acquire this offer

    JWTBodyConfirmPayment:
      allOf:
        - $ref: '#/components/schemas/JWTBodyCommon'
        - type: object
          required:
            - payment
          properties:
            payment:
              type: object
              required:
                - offer_id
                - user_id
                - date
              properties:
                offer_id:
                  type: string
                  description: offer id - id is decided by digital service
                user_id:
                  type: string
                  description: user identifier - same value as given by register
                date:
                  type: number
                  description: date of which payment was received in seconds from epoc
