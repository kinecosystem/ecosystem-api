openapi: 3.0.0
info:
  version: 1.0.0
  title: Kin Ecosystem
  description: Apis for client to server interaction
servers:
  - url: 'https://api.kinmarketplace.com/v1/'
  - url: 'https://api-stage.kinmarketplace.com/v1/'
  - url: 'https://api-test.kinmarketplace.com/v1/'
paths:
  /users:
    parameters:
      - $ref: '#/components/parameters/RequestId'
    post:
      tags:
        - Auth
      summary: Sign in/ Log in
      security:
        - ApiKeyAuth: []
      description: Sign a user into kin marketplace
      operationId: signIn
      requestBody:
        description: sign in data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignInData'
      responses:
        '200':
          description: Successfully created a user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/me/activate:
    parameters:
      - $ref: '#/components/parameters/RequestId'
    post:
      tags:
        - Auth
      summary: Activate account
      description: Activate account by accepting TOS
      operationId: activateAcount
      responses:
        '200':
          description: Successfully activated. New token is returned and should be used from now on.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /offers:
    parameters:
      - $ref: '#/components/parameters/RequestId'
    get:
      tags:
        - Offers
      summary: Return a list of offers
      description: Return a **list** of offers
      operationId: getOffers
      parameters:
        - $ref: '#/components/parameters/QueryLimit'
        - $ref: '#/components/parameters/QueryAfter'
        - $ref: '#/components/parameters/QueryBefore'
      responses:
        '200':
          description: Successfully returned a list of offers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OfferList'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/offers/{offer_id}/orders':
    parameters:
      - in: path
        name: offer_id
        required: true
        schema:
          type: string
        description: The offer id
      - $ref: '#/components/parameters/RequestId'
    post:
      tags:
        - Orders
      summary: create an order for an offer
      description: create an order for an offer
      operationId: createOrder
      responses:
        '201':
          description: Successfully created an order for an offer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OpenOrder'
        '404':
          description: Offer ended
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  '/orders/{order_id}':
    parameters:
      - in: path
        name: order_id
        required: true
        schema:
          type: string
        description: The order id
      - $ref: '#/components/parameters/RequestId'
    get:
      tags:
        - Orders
      summary: get an order
      description: get an order
      operationId: getOrder
      responses:
        '200':
          description: Successfully returned an order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Orders
      summary: submit an order
      description: submit an order
      operationId: submitOrder
      requestBody:
        description: submission of an order
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
      responses:
        '201':
          description: |
            Order has successfully been submitted 
            * For earn - poll form is valid, client should wait for payment on blockchain
            * For spend - server is notified and waiting for payment on blockchain
        '400':
          description: |
            Bad Request
            * For earn - payload is invalid
            * For spend/ earn - order has expired
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error' 
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Orders
      summary: cancel an order
      description: cancel an order
      operationId: cancelOrder
      responses:
        '204':
          description: Canceled order
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders:
    parameters:
      - $ref: '#/components/parameters/RequestId'
    get:
      tags:
        - Orders
      summary: get user order history
      description: get user order history
      operationId: getHistory
      parameters:
        - $ref: '#/components/parameters/QueryLimit'
        - $ref: '#/components/parameters/QueryBefore'
        - $ref: '#/components/parameters/QueryAfter'
      responses:
        '200':
          description: History result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderList'
        default:
          description: Generic Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
security:
  - ApiKeyAuth: []
    BearerAuth: []

components:
  parameters:
    RequestId:
      in: header
      name: X-REQUEST-ID
      required: true
      schema:
        type: string
      description: |
        A unique id for the request. A retransmitted request will have the same id
    QueryLimit:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 25
      description: maximum number of items in a list
    QueryBefore:
      in: query
      name: before 
      schema:
        type: string
      description: cursor that points to the start of the page of data that has been returned
    QueryAfter:
      in: query
      name: after
      schema:
        type: string
      description: cursor that points to the end of the page of data that has been returned

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

    BearerAuth:  # api requires the header Authorization: Bearer <token>
      type: http
      scheme: bearer

  schemas:
  
    coupon_code:
      description: "a coupon code - appears in a result object of an Order"
      type: string
      example: aaaa-bbbb-cccc
      
    failure_message:
      description: "failed order message - appears in a result object of an Order"
      type: string
      example: failed to find transaction in blockchain
      
    BlockchainData:
      description: "details taken from a blockchain transaction - all fields optional"
      type: object
      properties:
        transaction_id:
          type: string
        sender_address:
          type: string
        recipient_address:
          type: string
      
    Order:
      description: "a submitted order. it can be pending/completed/failed"
      type: object
      required:
        - status
        - order_id
        - completion_date
        - offer_type
        - title
        - description
        - amount
      properties:
        result:
          type: object
          oneOf:
          - $ref: '#/components/schemas/failure_message'
          - $ref: '#/components/schemas/coupon_code'
          description: | 
            * empty when no result (pending status, completed earn)
            * failure_message when status is failed
            * coupon_code when completed spend
        status:
          type: string
          enum:
            - pending
            - completed
            - failed
        order_id:
          type: string
          description: unique identifier of this item
        completion_date: # taken from blockchain
          type: string
          example: "2018-09-13T14:33:33"
          description: UTC ISO
        # filled by payment service
        blockchain_data:
          type: object
          $ref: "#/components/schemas/BlockchainData"
        # meta fields - filled by offer owner
        offer_type:
          type: string
          enum:
            - earn
            - spend
        title: 
          type: string
          example: Spotify
          description: usually a brand name
        description:
          type: string
          example: completed poll
        call_to_action:
          type: string
          example: tap to reveal coupon
        amount:
          type: integer
          example: 4000 (KIN)
          description: kin amount
          
    OrderList:
      description: "a list of submitted orders"
      type: object
      properties:
        transactions:
          type: array
          items:
            $ref: '#/components/schemas/Order'
        paging:
          type: object
          $ref: '#/components/schemas/Paging'
          
    HTMLPoll:
      description: "a poll implemented as an HTML page"
      type: object
      properties:
        content_type:
          type: string
          enum:
            - HTMLPoll
        content:
          type: string
          
    HTMLPollAnswer:
      description: "the result of a completed html poll"
      type: object
      properties:
        content_type:
          type: string
          enum:
            - HTMLPollAnswer
        answers:
          type: object
          additionalProperties:
            type: string
            
    Coupon:
      description: "a coupon offer"
      type: object
      properties:
        content_type:
          type: string
          enum:
            - Coupon
        description:
          type: string
          
    Offer:
      description: "offer details for the offer list"
      type: object
      required:
        - id
        - title
        - description
        - image
        - offer_type
        - amount
        - content
      properties:
        id:
          type: string
          example: "1231321"
        title:
          type: string
          example: "Spotify Subscription"
        description:
          type: string
          example: "Get 30 days"
        image:
          type: string
          example: "http://xxx.www.zzz/image.jpg"
        amount:
          type: integer
          example: 300
        content:
          type: object
          oneOf:
            - $ref: '#/components/schemas/HTMLPoll'
            - $ref: '#/components/schemas/Coupon'
          discriminator:
            propertyName: content_type
        offer_type:
          type: string
          enum:
            - earn
            - spend
            
    OfferList:
      description: "a list of offers"
      type: object
      properties:
        offers:
          type: array
          items:
            $ref: '#/components/schemas/Offer'
        paging:
          type: object
          $ref: '#/components/schemas/Paging'

    OpenOrder:
      description: "an open order that hasn't been submitted yet"
      type: object
      required:
        - id
      properties:
        id:
          type: string
          example: "sdfsdfsdfsd"
        blockchain_data:
          type: object
          $ref: "#/components/schemas/BlockchainData"
          description: recipient_address - relevant in case of spend

    SpendSubmission:
      description: "an order submission of a spend offer"
      type: object
      properties:
        offer_type:
          type: string
          enum:
            - SpendSubmission
        blockchain_data:
          type: object
          $ref: "#/components/schemas/BlockchainData"

    EarnSubmission:
      description: "an order submission of an earn offer - validation request of the poll"
      type: object
      properties:
        offer_type:
          type: string
          enum:
            - EarnSubmission
        completed_form:
          type: object
          oneOf:
            - $ref: '#/components/schemas/HTMLPollAnswer'
          discriminator:
            propertyName: content_type

    Submission:
      description: "generic order submission"
      type: object
      oneOf:
        - $ref: '#/components/schemas/SpendSubmission'
        - $ref: '#/components/schemas/EarnSubmission'
      discriminator:
        propertyName: offer_type
      example:
        offer_type: earn
        completed_form: {}

    SignInData:
      description: "payload required for signing in"
      type: object
      properties:
        jwt:
          type: string
          example: eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0aW1lc3RhbXAiOjEyMzQ1Njc4OTAsInVzZXJfaWQiOiJ1c2VyOjEyMzQiLCJhcHBfaWQiOiJhcHA6a2lrIn0.ywXZUlH2fSTxIk8V2egE9WkyJ4a9UOsAZqFN5G7o84al_utwmMA-HKSSM0-2EDtaZ2lM4FUIs0Byd0KO2HxglxrHL_grFHW_wFtnjcNrNxCsGKIXEpGowudQDuAh_ycY2EZ_JKhNY4ZPrTx69ImmeYvDkN3PvYV6_uSYQSMy6H0
          description: >
            jwt should contain "user_id", "app_id" and "timestamp"
        device_id:
          type: string
        public_address:
          type: string
          description: the address where earned funds will go to

    AuthToken:
      description: "token issued by marketplace server"
      type: object
      properties:
        token:
          type: string
          example: AAAAA-RRRRRR-DDDDD-BBBBBB
        activated:  # did approve terms of service?
          type: boolean

    Paging:
      description: "object accompanying lists - used to fetch next/previous section"
      type: object
      properties:
        cursors:
          type: object
          properties:
            after:
              type: string
              example: MTAxNTExOTQ1MjAwNzI5NDE
            before:
              type: string
              example: NDMyNzQyODI3OTQw
        previous:
          type: string
          example: https://graph.facebook.com/me/albums?limit=25&before=NDMyNzQyODI3OTQw
        next:
          type: string
          example: https://graph.facebook.com/me/albums?limit=25&after=MTAxNTExOTQ1MjAwNzI5NDE=

    Error:
      description: "an error"
      type: object
      required:
        - error
        - code
      properties:
        error:
          type: string
          example: "Invalid Form"
        message:
          type: string
          example: "Form given is not in the right format"
        code:
          type: integer
          example: 4001
